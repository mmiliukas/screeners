#!/usr/bin/env python

import logging
import logging.config
from concurrent.futures import ProcessPoolExecutor, as_completed

import typer
import yaml

from actions.aggregate import aggregate
from actions.reports import reports
from actions.revive import revive
from actions.scrape import scrape
from actions.tickers import tickers
from screeners.config import config

with open("config-logging.yml", "r") as config_logging:
    logging.config.dictConfig(yaml.safe_load(config_logging.read()))

app = typer.Typer()


@app.command(name="revive")
def command_revive() -> None:
    revive()


@app.command(name="scrape")
def command_scrape(cookies: str) -> None:
    with ProcessPoolExecutor() as pool:
        futures = [
            pool.submit(scrape, cookies, screener.cache_name, screener.url)
            for screener in config.screeners
        ]
        for future in as_completed(futures):
            future.result()


@app.command(name="tickers")
def command_tickers() -> None:
    tickers()


@app.command(name="aggregate")
def command_aggregate() -> None:
    aggregate()


@app.command(name="reports")
def command_reports() -> None:
    reports()


@app.command(name="etf")
def command_etf(cookies: str) -> None:
    from actions.etf import etf

    etf(cookies)


@app.command(name="giga")
def command_giga(cookies: str, index: int) -> None:
    from actions.giga import giga

    giga(cookies, index)


@app.command(name="notify")
def command_notify(message: str, bot_token: str, channel_id: str) -> None:
    from screeners.telegram import log_to_telegram

    log_to_telegram(message, bot_token, channel_id)


@app.command(name="cookies")
def command_cookies(username: str, password: str) -> None:
    from actions.cookies import cookies

    print(cookies(username, password))


@app.command(name="split")
def command_split() -> None:
    from actions.split import split

    split()


if __name__ == "__main__":
    app()
