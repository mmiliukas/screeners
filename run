#!/usr/bin/env python

import logging
import logging.config

import typer
import yaml

from screeners.config import config

with open("config-logging.yml", "r") as config_logging:
    logging.config.dictConfig(yaml.safe_load(config_logging.read()))


app = typer.Typer()


@app.command(name="scrape")
def command_scrape(cookies: str) -> None:
    from actions.scrape import scrape

    for screener in config.screeners:
        scrape(
            screener.name,
            cookies,
            screener.cache_name,
            screener.url,
        )


@app.command(name="tickers")
def command_tickers() -> None:
    from actions.tickers import tickers

    tickers()


@app.command(name="ignore")
def command_ignore() -> None:
    from actions.ignore import ignore

    ignore()


@app.command(name="aggregate")
def command_aggregate() -> None:
    from actions.aggregate import aggregate

    aggregate()


@app.command(name="reports")
def command_reports() -> None:
    from actions.reports import reports

    reports()


@app.command(name="etf")
def command_etf(cookies: str) -> None:
    from actions.etf import etf

    etf(cookies)


@app.command(name="giga")
def command_giga(cookies: str, index: int) -> None:
    from actions.giga import giga

    giga(cookies, index)


@app.command(name="revive")
def command_revive() -> None:
    from actions.revive import revive

    revive()


@app.command(name="refresh")
def command_refresh() -> None:
    from actions.refresh import refresh

    refresh()


@app.command(name="cookies")
def command_cookies(username: str, password: str) -> None:
    from actions.cookies import cookies

    print(cookies(username, password))


@app.command(name="top-1")
def command_top_1() -> None:
    from actions.top_1 import top_1

    top_1()


if __name__ == "__main__":
    app()
